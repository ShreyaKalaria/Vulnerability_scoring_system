# -*- coding: utf-8 -*-
"""
Created on Wed Nov 30 21:45:22 2022

@author: arman hossain
"""
from mainwindow import Excel
from PyQt5.QtWidgets import (
    QApplication)
import sys
# from overall_pipeline_reduced_time import predict
from utilities import read_pickle
import torch
import pandas as pd
import transformers

def predict(descriptions,col_name):
    
    model = read_pickle('./data/bert_model_'+col_name+'.pickle')
    encoder = read_pickle('./data/bert_encoder_'+col_name+'.pickle')
    device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
    
    # preprocess data
    X_test = ''
    if type(descriptions) == pd.core.series.Series:
        X_test = descriptions.values.tolist()
    else:
        X_test = [descriptions]
    lent = len(X_test)
    # tokenizer = BertTokenizer.from_pretrained('./model/bert_uncased_L-4_H-512_A-8',do_lower_case = True)
    tokenizer = read_pickle('./data/bert_tockenizer_.pickle')
    X_test = tokenizer(X_test, return_tensors="pt", padding="max_length", max_length=128, truncation=True)
    # X_test = predictor.tokenizer(X_test, return_tensors="pt", padding="max_length", max_length=128, truncation=True)
    # test_loader = DataLoader(Dataset(X_test, y_test), batch_size=64, shuffle=True)
    
    test_ids = []
    test_attention_mask = []
    
    test_ids.append(X_test['input_ids'])
    test_attention_mask.append(X_test['attention_mask'])
    test_ids = torch.cat(test_ids, dim = 0)
    test_attention_mask = torch.cat(test_attention_mask, dim = 0)
    
    model.eval()
    with torch.no_grad():
        # predictions = predictor.model(**X_test)
        predictions = model(test_ids.to(device), token_type_ids = None, attention_mask = test_attention_mask.to(device))
    
    predictions_class = []
    for i in range(lent):
        predictions_class.append(predictions.logits.softmax(1)[i].argmax().item())
    
    return encoder.inverse_transform(predictions_class)
    
if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = Excel()
    win.show()
    desc = 'ip_input.c in BSD-derived TCP/IP implementations allows remote attackers to cause a denial of service (crash or hang) via crafted packets.'
    print(predict(desc,'attackVector'))
    sys.exit(app.exec())
    

