# -*- coding: utf-8 -*-
"""
Created on Thu Aug  4 16:12:50 2022

@author: iit

val = aggregate([{'a':'x','b':'y','c':['zz','zz']},{'a':'x','b':'y','c':['zz','zz']},{'a':'a','b':'b','c':['zz','zz']}])
output: {'a': 'x,x,a', 'b': 'y,y,b', 'c': 'zz,zz,zz,zz,zz,zz'}
assumes object inside list. and that object contains list(that contains no object means raw data)
"""
#%% dict or list parser
excludeList = ['problemtype']
data = {}
def insertKeyValue(key,fromData):
    global data

    if(key in data.keys()):
        data[key] = data[key] +","+ str(fromData)
    else:
        data[key] = str(fromData)


def aggregate2(indexKey,json,flag):
    global data
    if(flag==0):
        data = {}
    if(type(json) is dict):
        for key in json.keys():
            if(key in excludeList):
                continue
            if(type(json[key]) is not dict and type(json[key]) is not list):
                insertKeyValue(key,json[key])
            else:
                aggregate2(key,json[key],1)

    elif(type(json) is list):
        for item in json:
            if(type(item) is not list and type(item) is not dict):
                insertKeyValue(indexKey,item)
            else:
                aggregate2(indexKey,item,1)

# ----------------
#%% import library section
import pandas as pd
import csv
df = pd.read_json('../data/nvdcve-1.1-2019.json')

#%% iterating all cveItem, parsing them and added to mainData list
mainData = []
headers = []
cve = df['CVE_Items']
for index in range(len(cve)):
    aggregate2('dump',cve[index],0)
    for head in data.keys():
        if(head not in headers):
            headers.append(head)
    mainData.append(data)
mainData

    
#%% converting list of dict to csv [list2dataFm]
df2 = pd.DataFrame()
df2

length = len(mainData)

index=0
for item in mainData:
    for key in item:
        if key not in df2.columns:
            df2[key] = [None]*length
        df2[key][index] = item[key]
        
    index+=1
df2

#%% write as csv
df2.to_csv('test4.csv',index=False)
    
#%% reading csv
df2 = pd.read_csv('test4.csv')
#%% description with attackvector

def dropRow(colmn):
    global avModel
    avModel = avModel[avModel[colmn].notnull()]


avModel = df2[['value','attackVector']]

r = avModel['attackVector']
r.notnull()
dropRow('attackVector')

avModel['attackVector'].unique()

avModel.to_csv('av.csv',index=False)
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    