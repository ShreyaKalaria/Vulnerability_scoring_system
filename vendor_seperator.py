# -*- coding: utf-8 -*-
"""
Created on Fri Aug 19 15:31:01 2022

@author: Arman
"""

import pandas as pd
class Cpe_perser:
    def sort_by_vend(self,df): # here df will be a touple consist of (vendor, value)
        return len(df[1])*-1
    def sort_by_prod(self,df): # here df will be a touple consist of (vendor, value)
        return df[1]*-1
    def sort_dict_df(self , dict_ , srt_fn):
        sorted_dict = {}
        for key, value in sorted(dict_.items(), key=srt_fn):
            sorted_dict[key] = value
        return sorted_dict

    def perse_cpe(self,datafm): # assumin cveId as index
        '''
        vendor1{
            ids    product1     product2    producn
            cve1    versions     versions    versions
            cve2    versions     versions    versions
            }
        
        vendor2{
            ids    product1     product2    producn
            cve1    versions     versions    versions
            }
        
        
        '''
        vendors = {}
        for id in datafm.index:
            # print(id)
            # print(datafm[id])
            if(not isinstance(datafm[id],str)):
                continue
            cpe_lst = datafm[id].split('#arman#')
            tempVendors = {}
            for a_cpe in cpe_lst:
                a_cpe_sp = a_cpe.split(':')
                tvendor = a_cpe_sp[3]
                product = a_cpe_sp[4]
                version = a_cpe_sp[5]
                if tvendor not in tempVendors.keys():
                    tempVendors[tvendor] = {"ID":id}
                if product not in tempVendors[tvendor].keys():
                    tempVendors[tvendor][product] = [version]
                elif version not in tempVendors[tvendor][product]:
                    tempVendors[tvendor][product].append(version)
            # print(tempVendors)
            
            for prod in tempVendors.keys():
                if prod not in vendors.keys():
                    vendors[prod] = pd.DataFrame()
                
                for key in tempVendors[prod]:
                    if key!="ID":
                        # print(prod)
                        # tempVendors[prod][key+"_len"] = len(tempVendors[prod][key])
                        tempVendors[prod][key] = ",".join(tempVendors[prod][key])
                vendors[prod] = vendors[prod].append(tempVendors[prod],ignore_index = True)
                
        return self.sort_dict_df(vendors, self.sort_by_vend)
    

    def get_top_products(self,sort_dic_df,n_vends,n_prods):
        keys = list(sort_dic_df.keys())
        prodlst = []
        ven_lst = []
        prod_lst = []
        for indx in range(n_vends):
            vendor_df = sort_dic_df[keys[indx]]
            vendor_dict = {}
            ven_lst.append(len(vendor_df))
            for col in vendor_df:
                
                if col=="ID": 
                    continue
                ven_prod = keys[indx]+"_"+col
                vendor_dict[ven_prod] = len(vendor_df)-vendor_df[col].isna().sum()
            vendor_dict = self.sort_dict_df(vendor_dict,self.sort_by_prod)
            
            temp_prod = list(vendor_dict.values())
            
            keys_prod = list(vendor_dict.keys())
            if len(keys_prod)<n_prods:
                prodlst = prodlst + keys_prod
                prod_lst = prod_lst + temp_prod
            else:
                prodlst = prodlst + keys_prod[:n_prods]
                prod_lst = prod_lst+ temp_prod[:n_prods]
        
        if len(prodlst) < n_vends * n_prods:
            return (keys[:n_vends],prodlst,ven_lst[:n_vends],prod_lst)
        else:
            return (keys[:n_vends],prodlst[:n_vends * n_prods],ven_lst[:n_vends],prod_lst[:n_vends * n_prods])

#%%

if False:
    
    data = pd.read_csv('../data/output/all_nvd.csv',index_col="ID")
    cpe_perser = Cpe_perser()
    sort_data = cpe_perser.perse_cpe(data["cpe23Uri"])
    
# sorting
    

    (top_vend,top_prod,ven_value,prod_value) = cpe_perser.get_top_products(sort_data, 50, 5)

    
#%% data saving
if False:
    
    import pickle
    
    with open('all_data.pickle', 'wb') as f:
        pickle.dump(sort_data, f)
        
    vedors_pickle = {}
    with open('../data/output/all_data.pickle', 'rb') as f:
        vedors_pickle = pickle.load(f)
        
# %% top saving
top_v = pd.DataFrame()
top_v['top_vend'] = top_vend
top_v['count'] = ven_value
top_v.to_csv("top_vendors.csv",index=False)
top_p = pd.DataFrame()
top_p['top_prod'] = top_prod
top_p['count'] = prod_value
top_p.to_csv("top_products.csv",index=False)
        





