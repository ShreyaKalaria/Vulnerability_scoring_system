# -*- coding: utf-8 -*-
"""
Created on Sat Nov 26 00:43:36 2022

@author: md arman hossain
"""

import sys

from PyQt5.QtWidgets import (
    QApplication, QWidget)
from PyQt5.uic import loadUi



class Cvss_calc(QWidget): # corresponding ui file must be qwidget type or the type qwidget can consume
    def __init__(self, parent=None):
        super().__init__(parent)
        # self.initui() # normally what I used to do
        loadUi("cvss_calculator.ui", self) # just a way to replace initui() functions
        # this ui file is a widget so it can be placed within qmainwindow
        # qdialog cannot be load on qmainwindow file
        self.setWindowTitle("CVSS calculator")
        self.result.setEnabled(False)
        self.connect()
        self.setFixedSize(600, 280)
        self.met_value_mapping ={
            'attackVector':{
                'NETWORK': 0.85,
                'ADJACENT_NETWORK': 0.62,
                'LOCAL': 0.55,
                'PHYSICAL': 0.2
                },
            'attackComplexity':{
                'LOW': 0.77,
                'HIGH': 0.44
                },
            'privilegesRequired':{
                'NONEUNCHANGED': 0.85,
                'NONECHANGED': 0.85,
                'LOWUNCHANGED': 0.62,
                'LOWCHANGED': 0.68,
                'HIGHUNCHANGED': 0.27,
                'HIGHCHANGED': 0.5
                },
            'userInteraction':{
                'NONE': 0.85,
                'REQUIRED': 0.62
                },
            'confidentialityImpact':{
                'NONE': 0,
                'HIGH': 0.56,
                'LOW': 0.22
                },
            'integrityImpact':{
                'NONE': 0,
                'HIGH': 0.56,
                'LOW': 0.22
                },
            'availabilityImpact':{
                'NONE': 0,
                'HIGH': 0.56,
                'LOW': 0.22
                },
            }
        
        self.recalc()
    def connect(self):
        self.ac.currentIndexChanged.connect(self.recalc)
        self.av.currentIndexChanged.connect(self.recalc)
        self.pr.currentIndexChanged.connect(self.recalc)
        self.ui.currentIndexChanged.connect(self.recalc)
        self.ci.currentIndexChanged.connect(self.recalc)
        self.ii.currentIndexChanged.connect(self.recalc)
        self.ai.currentIndexChanged.connect(self.recalc)
        self.scope.currentIndexChanged.connect(self.recalc)
    
    def roundup(self,val):
        if val == int(val): return val
        return float(('{0:.1f}'. format((val+0.05))))
    def onedec(self,val):
        return float(('{0:.1f}'. format((val))))
    
    def recalc(self):
        ac = self.ac.currentText()
        av = self.av.currentText()
        pr = self.pr.currentText()
        ui = self.ui.currentText()
        ci = self.ci.currentText()
        ii = self.ii.currentText()
        ai = self.ai.currentText()
        scope = self.scope.currentText()
        
        
        exploitabilityScore = 0
        impactScore = 0
        baseScore = 0
        ISS = 1 - ( (1 - self.met_value_mapping['confidentialityImpact'][ci]) * (1 - self.met_value_mapping['integrityImpact'][ii]) * (1 - self.met_value_mapping['availabilityImpact'][ai]) )
        if scope == 'CHANGED':    
            impactScore = 7.52 * (ISS - 0.029) - 3.25 * (ISS - 0.02) ** 15
        else:
            impactScore = ISS * 6.42
        
        exploitabilityScore = 8.22 * self.met_value_mapping['attackVector'][av] * self.met_value_mapping['attackComplexity'][ac] * self.met_value_mapping['privilegesRequired'][pr+scope] * self.met_value_mapping['userInteraction'][ui]
        
        if impactScore <= 0:
            baseScore = 0 
        elif scope == 'CHANGED':
            baseScore = self.roundup(min (1.08 * (impactScore + exploitabilityScore), 10))
        else:
            baseScore = self.roundup(min((impactScore + exploitabilityScore), 10))
            
        self.result.setText("              "+str(baseScore))

    
    
        
if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = Cvss_calc()
    win.show()
    sys.exit(app.exec())