# -*- coding: utf-8 -*-
"""
Created on Fri Nov 25 11:27:39 2022

@author: md arman hossain
!python mainwindow.py
"""

import sys

from PyQt5.QtWidgets import (
    QApplication, QDialog,QWidget, QMainWindow, QMessageBox,
)
from PyQt5.uic import loadUi

from graph import Window as GraphView
from nvd_downloader import download_data, download_scores_and_links
from merging_16_22_databases import merge_all
from data_files_generator import generate
from epss_dataset_generator import dataforexcel
from cvss_calculator import Cvss_calc


class Excel(QMainWindow):
    def __init__(self, parent=None):
        super().__init__(parent)
        loadUi("mainwindow.ui", self)
        self.initvar()
        self.connect()
        
    def initvar(self):
        self.graphview = GraphView()
        
    def connect(self):
        self.actionGraphical.triggered.connect(self.actiongraphicaltriggered)
        self.actionCVSS.triggered.connect(self.actioncvsstriggered)
        self.actionCheck_for_update.triggered.connect(self.update_data)
        self.actionUpdate_EPSS_Scores_and_Exploit_Links.triggered.connect(self.update_scores_and_links)
        self.actionExport.triggered.connect(self.exportData)
        
    def actiongraphicaltriggered(self):
        self.graphview.show()
        
    def actioncvsstriggered(self):
        self.win = Cvss_calc()
        self.win.show()
    
    def exportData(self):
        self.excel.tableWidget.saveFileDialog()
        
    def show_info(self,message,button_both=True):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        
        msg.setText(message)
        msg.setWindowTitle("Update Info")
        if button_both:
            msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        else:
            msg.setStandardButtons(QMessageBox.Ok)
        return msg.exec_()
    
    def update_scores_and_links(self):
        res = self.show_info('Are you sure want to proceed?')
        if res ==1024:
            download_scores_and_links()
            dataforexcel() # merge epss and links data with nvd dataset
            self.excel.reload_data()
            self.show_info('Successfully updated scores and links',False)
        
    def update_data(self):
        modified_years = download_data(True)
        if len(modified_years)>0:
            # res = 0
            res = self.show_info('Some update founded. if you proceed, it may required several time to complete')
            if res ==1024:
                modified_years = download_data(False)
                merge_all('./downloaded',modified_years) # affected year should be used and merging with original database inorder to reduce time
                
                generate("") # files will be generate for graph view
                dataforexcel() # merge epss and links data with nvd dataset
                self.excel.reload_data()
                self.show_info('Successfully updated data',False)
        
if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = Excel()
    win.show()
    sys.exit(app.exec())