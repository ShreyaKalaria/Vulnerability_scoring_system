# -*- coding: utf-8 -*-
"""
Created on Sun Sep 11 18:09:38 2022
    on qt designer a frame is promoted by Info_char and chart label.
    now this class will be automatically called when loading that ui file.
    consider this Info_chart class as a frame on that ui file
    just create necessary items and fillup that frame as self
@author: iit
"""
from PyQt5.QtWidgets import (
    QFrame, QDialog, QMainWindow, QMessageBox
)
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout
from PyQt5.QtChart import QChart, QChartView, QBarSet,QPercentBarSeries, QBarCategoryAxis
import sys
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt
class Info_chart(QFrame):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setGeometry(200,200,600,400)
        self.setWindowTitle("Creating Barchart")
        self.setWindowIcon(QIcon("python.png"))
        
        # self.setGeometry(200,200,600,400)
        # self.setWindowTitle("Creating Barchart")
        # self.setWindowIcon(QIcon("python.png"))
 
        #change the color of the window
        # self.setStyleSheet('background-color:#f0f0f0')
 
        #create barseries
        set0 = QBarSet("")
        set1 = QBarSet("")
        
 
 
        #insert data to the barseries
        set0 << 7 << 5 << 3 # for full row
        set1 << 4 << 5 << 2 # for empty row
 
        #we want to create percent bar series
        series = QPercentBarSeries()
        series.append(set0)
        series.append(set1)

        # labelsVisible,setLabelsFont
 
        #create chart and add the series in the chart
        chart = QChart()
        # chart.setLabelsFont(False)
        # print(dir(chart))
        # font = chart.font()
        # # font.pointSize = 0
        # font.setPointSize(1)
        # chart.setFont(font)
        # font = chart.font()
        # print(font.pointSize())
        chart.legend().setVisible(False)
        chart.setContentsMargins(-40,-40,-40,0) #let, upr, r, b
        chart.addSeries(series)
        # chart.setTitle("Barchart Percent Example")
        chart.setAnimationOptions(QChart.SeriesAnimations)
        # pen = chart.backgroundPen()
        # pen.setColor(Qt.blue)
        # chart.setBackgroundPen(pen)
        
        # ----------- margin -----------
        
        # margin = chart.margins()
        # print(dir(margin))
        # print(margin.__dict__)
        
        # print(margin.left())
        # print(margin.right())
        # print(margin.top())
        # print(margin.bottom())
        # margin.left = -110
        # margin.top = -110
        # margin.right = -110
        # margin.bottom = -110
        # chart.setMargins(margin)
        
        #------------
        # chart.setBackgroundVisible(True)
        
        # chart.setTheme(QChart.ChartThemeDark)
        set1.setColor(Qt.white)
 
        #create axis for the chart
        categories = ["CVSS2.0", "CVSS3.0", "EPSS..."]
 
        axis = QBarCategoryAxis()

        axis.append(categories)
        # chart.createDefaultAxes()
        chart.setAxisX(axis)
 
        #create chartview and add the chart in the chartview
        chartview = QChartView(chart)
        chartview.setStyleSheet('background-color:transparent')
        chartview.setContentsMargins(0,0,0,0)
        
        # print(dir(chartview))
        vbox = QVBoxLayout()
        vbox.setContentsMargins(0,0,0,0)
        
        # chartview.
        vbox.addWidget(chartview)
        
        # self.layout().removeItem(self.layout())
        # self.removeItem(self.layout())
        # self.rep(self.layout())
        
        self.setLayout(vbox)
        self.repaint()
    def update_chart(self,s1):
        # self.setGeometry(200,200,600,400)
        # self.setWindowTitle("Creating Barchart")
        # self.setWindowIcon(QIcon("python.png"))
 
        #change the color of the window
        # self.setStyleSheet('background-color:#f0f0f0')
 
        #create barseries
        set0 = QBarSet("")
        set1 = QBarSet("")
        
 
 
        #insert data to the barseries
        set0 << s1[0] << s1[1] << s1[2] # for full row
        set1 << 10-s1[0] << 10-s1[1] << 10-s1[2]*10 # for empty row
 
        #we want to create percent bar series
        series = QPercentBarSeries()
        series.append(set0)
        series.append(set1)

        # labelsVisible,setLabelsFont
 
        #create chart and add the series in the chart
        chart = QChart()
        # chart.setLabelsFont(False)
        # print(dir(chart))
        # font = chart.font()
        # # font.pointSize = 0
        # font.setPointSize(1)
        # chart.setFont(font)
        # font = chart.font()
        # print(font.pointSize())
        chart.legend().setVisible(False)
        chart.setContentsMargins(-40,-40,-40,0) #let, upr, r, b
        chart.addSeries(series)
        # chart.setTitle("Barchart Percent Example")
        chart.setAnimationOptions(QChart.SeriesAnimations)
        # pen = chart.backgroundPen()
        # pen.setColor(Qt.blue)
        # chart.setBackgroundPen(pen)
        
        # ----------- margin -----------
        
        # margin = chart.margins()
        # print(dir(margin))
        # print(margin.__dict__)
        
        # print(margin.left())
        # print(margin.right())
        # print(margin.top())
        # print(margin.bottom())
        # margin.left = -110
        # margin.top = -110
        # margin.right = -110
        # margin.bottom = -110
        # chart.setMargins(margin)
        
        #------------
        # chart.setBackgroundVisible(True)
        
        # chart.setTheme(QChart.ChartThemeDark)
        set1.setColor(Qt.white)
 
        #create axis for the chart
        categories = ["CVSS2.0", "CVSS3.0", "EPSS..."]
 
        axis = QBarCategoryAxis()

        axis.append(categories)
        # chart.createDefaultAxes()
        chart.setAxisX(axis)
 
        #create chartview and add the chart in the chartview
        chartview = QChartView(chart)
        chartview.setStyleSheet('background-color:transparent')
        chartview.setContentsMargins(0,0,0,0)
        
        # print(dir(chartview))
        vbox = QVBoxLayout()
        vbox.setContentsMargins(0,0,0,0)
        
        # chartview.
        vbox.addWidget(chartview)
        
        self.layout().removeItem(self.layout())
        
        self.setLayout(vbox)
        # self.repaint()
        