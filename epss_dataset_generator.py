# -*- coding: utf-8 -*-
"""
Created on Sat Aug 13 05:13:54 2022

@author: IIT
"""

# ! pip install pyexploitdb

import pandas as pd
from pyExploitDb import PyExploitDb

class P_ven_prod():
    def __init__(self,cpe_series):
        self.cpe_series = cpe_series
        self.vendors = []
        self.prods = []
        self.vendor_df = pd.DataFrame()
        self.prod_df = pd.DataFrame()
        self.vendor_info = {}
        
    def perse(self):
        lst = self.cpe_series.values.tolist()
        # vendor_lst1 = ['microsoft','adobe','ibm','hp','apache','apple','linux','oracle','opensuse','cisco','huawei','canonical','redhat','debian']
        # vendor_lst = ['microsoft','adobe','ibm','hp','apache','apple','google']
        df = pd.DataFrame()
        # for vendor in vendor_lst:
        #     df[vendor] = [0]*len(cpe_series)
        
        index = 0
        for item in lst:
            if(not isinstance(item, str)):
                index+=1
                continue
            cpe_lst = item.split('#arman#')
            
            for a_cpe in cpe_lst:
                a_cpe_sp = a_cpe.split(':')
                prod = a_cpe_sp[4]
                vendor= a_cpe_sp[3]
                
                if vendor not in self.vendors:
                    self.vendors.append(vendor)
                    self.vendor_df[vendor] = [0]*len(self.cpe_series)
                self.vendor_df[vendor][index] = 1
                
                if prod not in self.prods:
                    self.prods.append(prod)
                #     self.prod_df[prod] = [0]*len(self.cpe_series)
                # self.prod_df[prod][index] = 1
                
                
            index+=1
    def gen_vendor_info(self):
        lst = self.cpe_series.values.tolist()
        index = 0
        for item in lst:
            if(not isinstance(item, str)):
                index+=1
                continue
            cpe_lst = item.split('#arman#')
            
            for a_cpe in cpe_lst:
                a_cpe_sp = a_cpe.split(':')
                vendor= a_cpe_sp[3]
                
                if vendor not in self.vendor_info.keys():
                    self.vendor_info[vendor] = 0
                self.vendor_info[vendor] += 1
                
            index+=1
            
        return pd.DataFrame.from_dict(self.vendor_info, orient='index') 
    



    

def count_ref(ref_source):
    
    lst = ref_source.values.tolist()
    df = pd.DataFrame()
    df['ref_count'] = [0]*len(ref_source)
    
    index = 0
    for item in lst:
        if(not isinstance(item, str)): # if None
            index+=1
            continue
        refcnt = len(item.split('#arman#'))
        
        df['ref_count'][index] = refcnt
        index+=1
    
    return df
    

# def exploit():
#     expltlst = ['poc_code','weaponized']
#     return 0


def tags_poc_from_exploit_db(cve_id_series):
    
    # taglst = ['remote','dos','webapps','local'] # 'code_execution','memory_corruption' not in exploitdb
    taglst = [] # 'code_execution','memory_corruption' not in exploitdb
    pEdb = PyExploitDb()
    pEdb.debug = False
    pEdb.openFile()
    
    df = pd.DataFrame()
    # for tag in taglst:
    #     df[tag] = [0]*len(cve_id_series)
        
    df['poc_code'] = [0]*len(cve_id_series) 
    # df['code_link'] = [None]*len(cve_id_series) 
    
    index = 0
    for id in cve_id_series:    
        results = pEdb.searchCve(id)
        # results = pEdb.searchCve('CVE-2018-14592')
        # results = pEdb.searchCve('CVE-2021-1167')
        if (results==[] or type(results) != dict):
            index+=1
            continue
        else:
            df['poc_code'][index] = 1
            # df['code_link'][index] = results['exploit']
            if("tag_"+results['platform'] not in taglst):
                taglst.append("tag_"+results['platform'])
                df["tag_"+results['platform']] = [0]*len(cve_id_series)
            df["tag_"+results['platform']][index] = 1
                
            
        index+=1
        
        
    return df
        
def add_columns_to_df(orginal_df,add_df):
    for col in add_df:
        orginal_df[col] = add_df[col]
    return orginal_df

def get_epss(data):
    epss = pd.read_csv('C:/Users/IIT.DESKTOP-73JFK20/Downloads/epss_scores-2022-08-13.csv',index_col=0)
    for id in epss.index:
        if id in data.index:
            data['epss'][id] = epss['#model_version:v2022.01.01'][id]
            
    data = data.dropna()
    data.to_csv('epssv2.csv')

def generate(data):
      
    vendor_product_perser = P_ven_prod(data['cpe23Uri'])
    vendor_product_perser.perse()
    ref_cnt_df = count_ref(data['refsource'])
    
    tag_poc_df = tags_poc_from_exploit_db(data['ID'])
    
    total_df = pd.DataFrame()
    total_df['ID'] = data['ID']
    total_df = add_columns_to_df(total_df, vendor_product_perser.vendor_df)
    print("completed_1")
    total_df = add_columns_to_df(total_df, ref_cnt_df)
    print("completed_2")
    total_df = add_columns_to_df(total_df, tag_poc_df)
    print("completed_3")
    total_df = add_columns_to_df(total_df, vendor_product_perser.prod_df)
    print("completed_3")
    return total_df
    
if __name__ == "__main__":
    data = pd.read_csv('../data/output/all_nvd.csv')
    data = generate(data)
    
# %% saving data

import pickle
with open('all_data.pickle', 'wb') as f:
    pickle.dump(data, f)

data.to_csv('all_epss.csv',index = False)
total_df.to_csv('all_epss.csv',index = False)

#%% 

vendor_product_perser = P_ven_prod(data['cpe23Uri'])

vendor_product_perser.gen_vendor_info()

vendor_inf = vendor_product_perser.vendor_info


df = pd.DataFrame.from_dict(vendor_inf, orient='index') 
df.to_csv('vendor.csv')


































